---
## Customizes a Proxmox host.

  # Run a few sanity checks to validate this playbook is run against something
  # that looks like a Proxmox host.  If not, fail.
  - ansible.builtin.stat:
       path: /etc/pve
    register: p
    
  - ansible.builtin.assert:
      that: 
        - ansible_distribution == 'Debian'  # Host should be running Debian.
        - p.stat.isdir is defined and p.stat.isdir  # /etc/pve should exist.
      fail_msg: This host does not look like Proxmox.
      quiet: yes

  # Passes through primary user to be able to log in to web interface.
  # Needs a user created (probably {{ ansible_user }}) and passwordless sudo.
  - name: Add proxmox web interface users
    ansible.builtin.template:
     src: user.cfg.j2  # in role templates dir
     dest: /etc/pve/user.cfg
     backup: yes

  # Disable clustering services if standalone node
  - name: Disable clustering services
    ansible.builtin.systemd:
      name: "{{ item }}"
      state: disabled
    loop:
      - pve-ha-crm.service
      - pve-ha-lrm.service
      - corosync.service
      #- pvesr.timer # possibly not applicable in Proxmox 7.x+?
    when: proxmox_clustering == "no"  # default

  # Set timezone
  - name: Set timezone
    community.general.timezone:
      name: "{{ proxmox_timezone }}"

  # Creates directory for Proxmox-specific scripts
  - name: Create script directory
    ansible.builtin.file:
      path: "{{ proxmox_scripts_dir }}"
      state: directory
      mode: 0755

  # Copies shell script which eases cloud-init template creation    
  - name: Copy cloud-init template deployment script
    ansible.builtin.template:
      src: deploy-cloud-init-template.sh.j2
      dest: "{{ proxmox_scripts_dir }}/deploy-cloud-init-template.sh"
      mode: 0744

  # Copies PVE configuration backup script
  - name: Copy PVE host config backup script
    ansible.builtin.template:
      src: pve-config-backup.sh.j2
      dest: "{{ proxmox_scripts_dir }}/pve-config-backup.sh"
      mode: 0744

  # Installs PVE configuration backup service template
  - name: Install pve-config-backup systemd service
    ansible.builtin.template:
      src: pve-config-backup.service.j2
      dest: /etc/systemd/system/pve-config-backup.service
      owner: root
      group: root
      mode: 0755
      lstrip_blocks: yes
    notify: Enable systemd service

  # Installs PVE configuration backup service timer template
  - name: Install pve-config-backup systemd timer
    ansible.builtin.template:
      src: pve-config-backup.timer.j2
      dest: /etc/systemd/system/pve-config-backup.timer
      owner: root
      group: root
      mode: 0755
      lstrip_blocks: yes
    notify: Enable systemd timer

  # Set tmp directory for backups to /tmp (vs. target storage)
  - name: Set vzdump tmpdir
    ansible.builtin.lineinfile:
      path: /etc/vzdump.conf
      regexp: "^#tmpdir"
      line: "tmpdir: /tmp"
      backup: yes

  # Add Backup disk to /etc/fstab
  - name: Add backup drive to fstab
    ansible.posix.mount:
      path: "{{ proxmox_backup_disk_mount }}"
      src: "LABEL={{ proxmox_backup_disk_label }}"
      fstype: ext4
      opts: "{{ proxmox_backup_disk_opts }}"
      state: present
    when: proxmox_backup_disk_mount is defined
    notify: Reload systemctl

  # Add required IOMMU kernel modules
  - name: Add required IOMMU kernel modules
    ansible.builtin.template:
      src: iommu.conf.j2
      dest: /etc/modules-load.d/iommu.conf
      backup: yes
      mode: 0644

  # Determine if host is booted UEFI or legacy MBR
  - name: Determine UEFI or MBR
    ansible.builtin.stat:
      path: /sys/firmware/efi
    register: p  # if p.stat.isdir is defined, then UEFI
  
  # Modify GRUB config (if booted via MBR)
  - name: Enable IOMMU in GRUB config
    ansible.builtin.lineinfile:
      path: /etc/default/grub
      regexp: "^GRUB_CMDLINE_LINUX_DEFAULT="
      line: GRUB_CMDLINE_LINUX_DEFAULT="quiet intel_iommu=on iommu=pt"
      backup: yes
    when: p.stat.isdir is not defined
    notify:
    - Update GRUB
    - Reboot warning

  # Modify UEFI boot image command line - assumes ZFS (if booted UEFI)
  - name: Enable IOMMU in UEFI cmdline
    ansible.builtin.lineinfile:
      path: /etc/kernel/cmdline
      regexp: "^root=ZFS" # maybe not the best check if running EFI+LVM, but why
      line: root=ZFS=rpool/ROOT/pve-1 boot=zfs intel_iommu=on iommu=pt
      backup: yes
    when: p.stat.isdir is defined and p.stat.isdir
    notify:
    - Update UEFI
    - Reboot warning