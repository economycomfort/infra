---
## Handles initial deployment and configuration of defined hosts.

  - hosts: all
    become: yes
    vars_files:
      - 'vars/vault.yaml'
    
    roles:
      - role: grog.package
      - { role: dab-dotfiles, become: no }

    tasks:
      - name: Remove Ubuntu MOTD spam
        ansible.builtin.file:
          path: "/etc/update-motd.d/{{ item }}"
          state: absent
        loop:
          - 80-livepatch
          - 95-hwe-eol
          - 10-help-text
          - 50-motd-news
        when: ansible_distribution == "Ubuntu"

      - name: Remove Debian MOTD legalese
        ansible.builtin.file:
          path: "/etc/motd"
          state: absent
        when: ansible_distribution == "Debian" or ansible_distribution == "Kali"

  #################
  ###  proxmox  ###
  #################
  - hosts: proxmox
    tasks:
      # Passes through primary user to be able to log in to web interface.
      # Needs a user created (probably david) and passwordless sudo.
      - name: Add proxmox web interface users
        ansible.builtin.template:
          src: "proxmox/user.cfg.j2"  # relative to main playbook dir
          dest: "/etc/pve/user.cfg"
      
      # Copies shell script which eases cloud-init template creation    
      - name: Copy cloud-init template deployment script
        ansible.builtin.template:
          src: "proxmox/deploy-cloud-init-template.sh.j2"
          dest: "/root/deploy-cloud-init-template.sh"
          mode: 0744

      # Copies proxmox config backup script
      - name: Copy proxmox configuration backup script
        ansible.builtin.template:
          src: "proxmox/pvehost-backup.j2"
          dest: "/etc/cron.daily/pvehost-backup"
          mode: 0755

    roles:
      - role: geerlingguy.ntp
      - role: simoncaron.pve_addons
 
  ################
  ###  chunky  ###
  ################
  - hosts: chunky
    become: yes
    vars_files:
      - 'vars/vault.yaml'
    
    pre_tasks:
      # Checks to see if defined ZFS pools are mounted. Playbook fails if not.
      # These pools should be mounted before running this playbook.
      - name: Ensure ZFS pool(s) are imported and mounted before proceeding
        community.general.zpool_facts:
          pool: "{{ item.name }}"
        loop: "{{ zpools }}"
      
      # Ensures that defined ZFS datasets are mounted.
      - name: Gathering facts about ZFS datasets
        community.general.zfs_facts:
          dataset: "{{ item.name }}"
          recurse: false
        loop: "{{ zdatasets }}"
        register: dab_datasets

      - set_fact:
          mount_status: "{{ dab_datasets.results | map(attribute='ansible_facts') | flatten | map(attribute='ansible_zfs_datasets') | flatten | map(attribute='mounted') }}"
          mount_name: "{{ zdatasets | map(attribute='name') }}"

      - name: Fail if a ZFS dataset is not mounted.
        ansible.builtin.fail:
          msg: "{{ mount_name[ansible_loop.index0] }} is not mounted!"
        loop: "{{ mount_name }}"
        loop_control: 
          extended: true
        when: mount_status[ansible_loop.index0] == 'no'

      # On the storage host, we're using an alternate path for /home.
      # The following tasks create a symlink for continuity.
      - name: Checking for existence of zhome directory
        ansible.builtin.stat:
          path: "{{ zhome }}"
        register: zfshome
      
      - name: Discovering facts about /home
        ansible.builtin.stat:
          path: /home
        register: oldhome
      
      # These commands must be combined; if not, our users $HOME will
      # be absent and subsequent SSH connections in the playbook will fail.
      - name: Symlink /home to zhome
        ansible.builtin.shell: 
          cmd: "mv /home /home.orig && ln -sf {{ zhome }} /home"
        when: 
          - zfshome.stat.exists == True
          - oldhome.stat.islnk == False
    
    roles:
      - role: buluma.mount
      - role: geerlingguy.docker
      - role: geerlingguy.nfs
      - role: vladgh.samba.server

    tasks:
      # Sanoid configuration for automated ZFS snapshots
      - name: Create /etc/sanoid directory
        ansible.builtin.file:
          path: /etc/sanoid
          state: directory
          mode: 0755

      - name: Copy sanoid configuration template
        ansible.builtin.template:
          src: sanoid.conf.j2
          dest: /etc/sanoid/sanoid.conf
          owner: root
          group: root
          mode: 0644

  #################
  ###  homebot  ###
  #################
  - hosts: homebot
    become: yes
    vars_files:
      - 'vars/vault.yaml'
    roles:
      - role: geerlingguy.docker

  ##############
  ###  yoshi  ##
  ##############
  - hosts: yoshi
    become: yes
    roles:
      - role: vladgh.samba.server
  
  #################
  ###  sandbox  ###
  #################
  - hosts: sandbox
    become: yes
    roles:

  ######################
  ###  Vectra Hosts  ###
  ######################
  - hosts: vectra
    become: yes
    tasks:
      - name: Ensure correct hostname
        ansible.builtin.hostname:
          name: "{{ inventory_hostname }}"
