---
### Manages mounting disks and filesystems appropriately.

#- name: import zpool
#  become: yes
#  command: zpool import -d /dev/disk/by-id -aN

# TESTING ONLY - we aren't mounting any actual filesystems,
# so these are pretend filesystems.
- name: create dummy filesystem for testing
  ansible.builtin.file:
    path: "{{ item.src }}"
    state: directory
  with_items: "{{ bind_mount_mapping }}"

# TESTING ONLY - populate our fake ZFS with dummy files.
#- name: create dummy files in the dummy filesystem
#  ansible.builtin.tempfile:
#    path: "{{ item.src }}"
#    state: file
#    prefix: ansible. 
#  with_items: "{{ bind_mount_mapping }}"

- name: checking to see if david's home directory exists
  ansible.builtin.stat:
    path: "/home/{{ ansible_user | default('david') }}"
  register: home_stat

#- name: debug output
#  debug:
#    msg: "File stat is {{ home_stat.stat.exists }}"

- name: move existing home directory to /mnt/tank/home
  ansible.builtin.copy: 
    src: "/home/{{ ansible_user | default('david') }}"
    dest: "/mnt/tank/home"
    owner: "{{ ansible_user | default('david') }}"
    group: "{{ ansible_user | default('david') }}"
    remote_src: yes
    force: no
  when: home_stat.stat.exists

- name: removing /home
  ansible.builtin.file:
    path: /home
    state: absent

- name: linking /home to /mnt/tank/home
  ansible.builtin.file:
    src: /mnt/tank/home
    dest: /home
    owner: root
    group: root
    state: link

# TESTING ONLY: need something in the new /home
#- name: moving old home directory contents to new testing /home
#  ansible.builtin.copy:
#    src: "/tmp/{{ ansible_user | default('david') }}"
#    dest: "/mnt/tank/home/"
#    owner: "{{ ansible_user | default('david') }}"
#    group: "{{ ansible_user | default('david') }}"
#    remote_src: yes
#    force: no

- name: create NFS mountpoints
  ansible.builtin.file:
    path: "{{ item.dest }}"
    state: directory
  with_items: "{{ bind_mount_mapping }}"

- name: create NFS bind mounts
  ansible.posix.mount:
    path: "{{ item.dest }}"
    src: "{{ item.src }}"
    opts: bind
    state: mounted
    fstype: none
  with_items: "{{ bind_mount_mapping }}"


