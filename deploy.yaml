---
## Handles initial deployment and configuration of defined hosts.

  - hosts: all
    become: yes
    vars_files:
      - 'vars/vault.yaml'
      - 'vars/common.yaml'
    
    pre_tasks:     
      - name: import keys from github
        ansible.posix.authorized_key:
          user: "{{ ansible_user }}"
          state: present
          key: https://github.com/economycomfort.keys

    roles:
      - role: grog.package
      - role: dab-motd
      - { role: dab-dotfiles, become: no }

  #################
  ###  proxmox  ###
  #################
  - hosts: proxmox:tinyprox
    tasks:
    roles:
      - role: dab-proxmox
      - role: simoncaron.pve_addons
      - role: geerlingguy.ntp
 
  ###############
  ###  servo  ###
  ###############
  - hosts: servo
    become: yes
    
    pre_tasks:
      # Checks to see if defined ZFS pools are mounted. Playbook fails if not.
      # These pools should be mounted before running this playbook.
      - name: Ensure ZFS pool(s) are imported
        community.general.zpool_facts:
          pool: "{{ item.name }}"
        loop: "{{ zpools }}"
      
      # Ensures that defined ZFS datasets are mounted.
      - name: Ensure required ZFS datasets exist and are mounted
        community.general.zfs_facts:
          dataset: "{{ item.name }}"
          recurse: false
        loop: "{{ zdatasets }}"
        register: dab_datasets

      - ansible.builtin.set_fact:
          # :(
          mount_status: "{{ dab_datasets.results | map(attribute='ansible_facts') | flatten | map(attribute='ansible_zfs_datasets') | flatten | map(attribute='mounted') }}"
          mount_name: "{{ zdatasets | map(attribute='name') }}"

      - name: Fail if a ZFS dataset is not mounted.
        ansible.builtin.fail:
          msg: "{{ mount_name[ansible_loop.index0] }} is not mounted!"
        loop: "{{ mount_name }}"
        loop_control: 
          extended: true
        when: mount_status[ansible_loop.index0] == 'no'

      # On the storage host, we're using an alternate path for /home.
      # The following tasks create a symlink for continuity.
      - name: Checking for existence of zhome directory
        ansible.builtin.stat:
          path: "{{ zhome }}"
        register: zfshome
      
      - name: Discovering facts about /home
        ansible.builtin.stat:
          path: /home
        register: oldhome
      
      # These commands must be combined; if not, our user's $HOME will
      # be absent and subsequent SSH connections in the playbook will fail.
      - name: Symlink /home to zhome
        ansible.builtin.shell: 
          cmd: "mv /home /home.orig && ln -sf {{ zhome }} /home"
        when: 
          - zfshome.stat.exists == True
          - oldhome.stat.islnk == False
    
    roles:
      - role: buluma.mount
      - role: geerlingguy.docker
      - role: geerlingguy.nfs
      - role: vladgh.samba.server

    tasks:
      # Sanoid configuration for automated ZFS snapshots
      - name: Create /etc/sanoid directory
        ansible.builtin.file:
          path: /etc/sanoid
          state: directory
          mode: 0755

      - name: Copy sanoid configuration template
        ansible.builtin.template:
          src: servo/sanoid/sanoid.conf.j2
          dest: /etc/sanoid/sanoid.conf
          owner: root
          group: root
          mode: 0644

      #- name: Install syncoid cron
      #  ansible.builtin.template:
      #    src: servo/sanoid/syncoid-cron.j2
      #    dest: /etc/cron.d/syncoid
      #    owner: root
      #    group: root
      #    mode: 0644

      #- name: Restart cron
      #  command: service cron restart

      - name: Install syncoid systemd service
        ansible.builtin.template:
          src: servo/sanoid/syncoid.service.j2
          dest: /etc/systemd/system/syncoid.service
          owner: root
          group: root
          mode: 0755
          lstrip_blocks: yes

      - name: Install syncoid systemd timer
        ansible.builtin.template:
          src: servo/sanoid/syncoid.timer.j2
          dest: /etc/systemd/system/syncoid.timer
          owner: root
          group: root
          mode: 0755
          lstrip_blocks: yes

      - name: Enable syncoid systemd service
        ansible.builtin.systemd:
          name: syncoid
          enabled: yes
          state: started
          masked: no

      - name: Enable syncoid systemd timer
        ansible.builtin.systemd:
          name: syncoid.timer
          enabled: yes
          state: started

  #################
  ###  homebot  ###
  #################
  - hosts: homebot
    become: yes
    tasks:
      - name: Insert cronjob to sync docker service configuration to servo
        ansible.builtin.cron:
          name: Backup homebot docker services to servo
          minute: 40
          hour: 23
          job: "rsync -avzq --del ~/appdata/ servo:/mnt/fast/appdata/homebot/"
          user: "{{ ansible_user }}"

    roles:
      - role: geerlingguy.docker
  
  ###################
  ###  pihole(s)  ###
  ###################
  - hosts: pihole
    become: yes
    tasks:
      - name: "Install Pihole"
        ansible.builtin.command: "curl -sSL https://install.pi-hole.net | bash"
  
  #################
  ###  sandbox  ###
  #################
  - hosts: sandbox
    become: yes
    roles:

  ######################
  ###  Vectra Hosts  ###
  ######################
  - hosts: vectra
    become: yes
    tasks:
      - name: Ensure correct hostname
        ansible.builtin.hostname:
          name: "{{ inventory_hostname }}"
